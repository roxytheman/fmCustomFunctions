// PASSWORD GENERATE

// This function generates a random password that includes uppercase letters,
// lowercase letters, digits, and special characters, ensuring diversity and security.

// Function Name : passwordGenerate
// Parameters : pwLength
// Use example : passwordGenerate ( 32 )

// PASSWORD GENERATE

// This function generates a random password that includes 
// uppercase letters, lowercase letters, digits, and special
// characters, ensuring diversity and security.

While ( [ 

		~count = GetAsNumber ( pwLength );
		~uppers = "ABCDEFGHJKMNPQRSTUVWXYZ" ;
		~lowers = "abcdefghjkmnpqrstuvwxyz" ;
		~digits = "23456789" ;
		~specials = "!@#$%^&*()~+_" ;
		~s = ~lowers & ~uppers & ~digits & ~specials ;
		~noSpecials = ~lowers & ~uppers & ~digits ;
		~randUpper = Middle(~uppers; Int(Random*Length(~uppers))+1; 1) ;
		~randLower = Middle(~lowers; Int(Random*Length(~lowers))+1; 1) ;
		~randSpecial = Middle(~specials; Int(Random*Length(~specials))+1; 1) ;
		~rawPassword = Middle(~noSpecials; Int(Random*Length(~noSpecials))+1; 1) ;
		~i = 1
		
	] ; 

		~i < ~count

	; [ 

		~rawPassword = ~rawPassword & Middle(~s; Int(Random*Length(~s))+1; 1) ;
		~locs0 = "¶1¶2¶3¶4¶5¶6¶7¶8¶9¶10¶";
		// Make sure that ~locs0 starts and ends with ¶ and that the list counts upward starting from 1.

		~pwLength = Length(~rawPassword);

		~addSpecialLoc = GetValue(~locs0; Int(Random*(~pwLength-1))+2+1);
		~addedSpecial = Replace(~rawPassword; ~addSpecialLoc; 1; ~randSpecial);
		~locsUpper = Substitute(~locs0; "¶" & ~addSpecialLoc & "¶"; "¶");
		~addUpperLoc = GetValue(~locsUpper; Int(Random*(~pwLength-1))+1+1);
		~addedUpper = Replace(~addedSpecial; ~addUpperLoc; 1; ~randUpper);
		~locsLower = Substitute(~locsUpper; "¶" & ~addUpperLoc & "¶"; "¶");
		~addLowerLoc = GetValue(~locsLower; Int(Random*(~pwLength-2))+1+1);
		~addedLower = Replace(~addedUpper; ~addLowerLoc; 1; ~randLower);
		~resultPassword = ~addedLower ;

		~i = ~i + 1

	] ; 

		~resultPassword

)

// This function creates a randomised password by selecting characters from predefined pools of uppercase letters, 
// lowercase letters, digits, and special symbols. It ensures the password includes at least one character from each category, 
// enhancing its complexity. The password’s length is flexible, and users can adjust it by modifying the number of random selections. 
// The process involves generating a base string of random characters, strategically inserting characters from specific groups 
// (uppercase, lowercase, special), and ensuring distribution across the password. 
// The result is a secure, diverse password suitable for protecting sensitive data.

// GitHub : 
// BD Link : https://www.briandunning.com/cf/2788
// Written by: jonni@me.com
// V 2.0
